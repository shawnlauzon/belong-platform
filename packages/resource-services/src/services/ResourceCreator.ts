import { supabase, eventBus, logger, logApiCall, logApiResponse } from '@belongnetwork/core';
import type { AppEvent, ResourceData } from '@belongnetwork/core';
import { toDbResource, toDomainResource } from '../transformers/resourceTransformer';

export class ResourceCreator {
  private static initialized = false;

  static initialize(): void {
    if (this.initialized) {
      logger.debug('‚ûï ResourceCreator: Already initialized, skipping...');
      return;
    }

    logger.info('üöÄ ResourceCreator: Initializing...');

    eventBus.on('resource.create.requested', (event: AppEvent) => {
      if (event.type !== 'resource.create.requested') {
        logger.error('‚ûï ResourceCreator: Received invalid event type', { event });
        return;
      }

      logger.debug('‚ûï ResourceCreator: Create requested', { resourceData: event.data });
      this._createResource(event.data);
    });

    this.initialized = true;
    logger.info('‚úÖ ResourceCreator: Initialized successfully');
  }

  private static async _createResource(resourceData: Omit<ResourceData, 'id' | 'created_at' | 'times_helped'>): Promise<void> {
    logger.debug('‚ûï ResourceCreator: Starting resource creation', { resourceData });

    try {
      // Create a complete resource object with required fields
      const resource = {
        ...resourceData,
        id: '', // Will be generated by the database
        created_at: new Date().toISOString(),
        times_helped: 0,
      } as const;

      // Convert domain model to database model
      const insertData = {
        ...toDbResource(resource, false),
        is_active: true,
        times_helped: 0,
      };

      logApiCall('POST', 'supabase/resources', insertData);

      const { data, error } = await supabase
        .from('resources')
        .insert([insertData])
        .select('*')
        .single();

      if (error) {
        logApiResponse('POST', 'supabase/resources', null, error);
        throw new Error(`Failed to create resource: ${error.message}`);
      }

      if (!data) {
        logApiResponse('POST', 'supabase/resources', null, 'No data returned');
        throw new Error('Failed to create resource: No data returned');
      }

      // Convert database model back to domain model
      const createdResource = toDomainResource(data);

      logApiResponse('POST', 'supabase/resources', { resourceId: createdResource.id });
      logger.info('‚úÖ ResourceCreator: Successfully created resource', { 
        resourceId: createdResource.id,
        title: createdResource.title 
      });

      eventBus.emit('resource.created', createdResource);
    } catch (error) {
      logger.error('‚ùå ResourceCreator: Failed to create resource', { error, resourceData });
      logApiResponse('POST', 'supabase/resources', null, error);
      
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      eventBus.emit('resource.create.failed', { error: errorMessage });
    }
  }
}