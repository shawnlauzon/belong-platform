/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ThanksImport } from './routes/thanks'
import { Route as ResourcesImport } from './routes/resources'
import { Route as CommunityImport } from './routes/community'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIdImport } from './routes/profile.$id'

// Create/Update Routes

const ThanksRoute = ThanksImport.update({
  id: '/thanks',
  path: '/thanks',
  getParentRoute: () => rootRoute,
} as any)

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const CommunityRoute = CommunityImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIdRoute = ProfileIdImport.update({
  id: '/profile/$id',
  path: '/profile/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
    '/thanks': {
      id: '/thanks'
      path: '/thanks'
      fullPath: '/thanks'
      preLoaderRoute: typeof ThanksImport
      parentRoute: typeof rootRoute
    }
    '/profile/$id': {
      id: '/profile/$id'
      path: '/profile/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof ProfileIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/resources': typeof ResourcesRoute
  '/thanks': typeof ThanksRoute
  '/profile/$id': typeof ProfileIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/resources': typeof ResourcesRoute
  '/thanks': typeof ThanksRoute
  '/profile/$id': typeof ProfileIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/resources': typeof ResourcesRoute
  '/thanks': typeof ThanksRoute
  '/profile/$id': typeof ProfileIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/community' | '/resources' | '/thanks' | '/profile/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/community' | '/resources' | '/thanks' | '/profile/$id'
  id:
    | '__root__'
    | '/'
    | '/community'
    | '/resources'
    | '/thanks'
    | '/profile/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunityRoute: typeof CommunityRoute
  ResourcesRoute: typeof ResourcesRoute
  ThanksRoute: typeof ThanksRoute
  ProfileIdRoute: typeof ProfileIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunityRoute: CommunityRoute,
  ResourcesRoute: ResourcesRoute,
  ThanksRoute: ThanksRoute,
  ProfileIdRoute: ProfileIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/community",
        "/resources",
        "/thanks",
        "/profile/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/community": {
      "filePath": "community.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx"
    },
    "/thanks": {
      "filePath": "thanks.tsx"
    },
    "/profile/$id": {
      "filePath": "profile.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
